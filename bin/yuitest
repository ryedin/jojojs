#!/usr/bin/env node

var util    = require("util"),
    fs      = require("fs"),
    path    = require("path"),
    vm      = null,
    YUITest = require("yuitest"),
    TestRunner = YUITest.TestRunner,
    stdout  = process.stdout,
    stderr  = process.stderr,
    formatter = null;

var arg, 
    args = [], 
    argv = process.argv.slice(2),
    files = [];

if (process.binding("natives").vm){
  vm = require("vm");
}

//options collected from command line  
var options = {
    verbose: false,
    webcompat: false,
    help: false,
    format: "tap"
};

//-----------------------------------------------------------------------------
// Function to get all files in a directory
//-----------------------------------------------------------------------------

function getFiles(dir){
    var files = [];
    
    try {
        fs.statSync(dir);
    } catch (ex){
        return [];
    }

    function traverse(dir, stack){
        console.log("Traversing " + dir);
        stack.push(dir);
        fs.readdirSync(stack.join("/")).forEach(function(file){
            var path = stack.concat([file]).join("/");
            var stat = fs.statSync(path);
            
            if (file[0] == ".") {
                return;
            } else if (stat.isFile() && /\.js$/.test(file)){
                files.push(path);
            } else if (stat.isDirectory()){
                traverse(file, stack);
            }
        });
        stack.pop();
    }
    
    traverse(dir, []);

    return files;
}

function outputHelp(){
    stdout.write([
        "\nUsage: yuitest [options] app-name [file|dir]*",
        " ",
        "Global Options",
        "  --groups groupname  Run only test cases that are part of groupname.",
        "  --help              Displays this information.",
        "  --format <format>   Specifies output format (junitxml, tap, xunit).",
        "  --verbose           Display informational messages and warnings.",
        "  --webcompat         Load tests designed for use in browsers."   
    ].join("\n") + "\n\n");
}

//-----------------------------------------------------------------------------
// Process command line
//-----------------------------------------------------------------------------
var first = true;
while (arg = argv.shift()) {
  if (arg === __filename) { continue }

  if (arg[0] !== '-') {
    if (first) {
      options.appName = arg;
      first = false;
    } else {
      //see if it's a directory or a file
      if (fs.statSync(arg).isDirectory()){
          console.log("getting files in " + arg);
          files = files.concat(getFiles(arg));
      } else {
        console.log("Pushing file " + arg);
        files.push(arg);
      }
    }
  } else {
      arg = arg.match(/^--?(.+)/)[1];
      if (arg == 'format') {
        options[arg] = argv.shift();
      } else {
        options[arg] = true;
      }
  }
}

if (options.help){
    outputHelp();
    process.exit(0);
}

//get the full path names
files = files.map(function(filename){
    return path.join(process.cwd(), filename);
});

//-----------------------------------------------------------------------------
// Determine output format
//-----------------------------------------------------------------------------

switch(options.format){
    case "junitxml":
        if (options.verbose){
            console.info("Using JUnitXML output format.\n");
        }
        YUITest.Node.CLI.Format(YUITest.TestFormat.JUnitXML);
        formatter = YUITest.TestFormat.JUnitXML;
        break;
    case "xunit":
      if (options.verbose) {
        console.info("Using XUnit output format.\n");
      }
      break;
    case "tap":
        if (options.verbose){
            console.info("Using TAP output format.\n");
        }
        YUITest.Node.CLI.Format(YUITest.TestFormat.TAP);
        formatter = YUITest.TestFormat.TAP;
        break;
    default:
        if (options.verbose){
            console.info("Using XUnit output format.\n");
        }
        YUITest.Node.CLI.XUnit();
        formatter = YUITest.TestFormat.TAP;
        break;
}

//-----------------------------------------------------------------------------
// Set up TestRunner
//-----------------------------------------------------------------------------

TestRunner.subscribe("complete", function(event){

  // Write test results to file.
  var output = formatter(event.results);
  var path = process.cwd() + '/reports/test-results.xml';
  util.puts("Writing report to " + path);
  fs.writeFileSync(path, output);
  
  feather.shutdown();
});

var appName = options.appName;

if (!appName || appName.length == 0) {
  console.error("No application specified");
} else {
  
  var options = {
    // Any property /not/ in the environments block is global to all environments 
    // and is the default.  Each environment may still override.
    debug: true,
    useEnv: 'test',
    featherRoot:process.env.FEATHER_HOME + "/lib",
    appRoot: process.cwd(),
    auth: {
      enabled: false,
      userIdPrefix: "ord.couchdb.user:"
    },
    data: {
      datalinking: {
        enabled: true
      }
    },
    daemon: {
      runAsDaemon: false
    },
    domPoolSize: {
      min: 10,
      max: 20
    },
    session: {
      config: {
        key: "feather.sid",
        cookie: { path: "/", httpOnly: false, maxAge: 14400000 },
        secret: "feather app key"
      },
      ignorePaths: ["/robots.txt"]
    },
    ui: {
      enabled: true,
      provider: {
        jsFiles: [
          "feather-client/lib/jqueryUI-1.8.12/js/jquery-ui.js",
          "feather-client/ui.js"
        ],
        cssFiles: [
          "feather-client/lib/jqueryUI-1.8.12/css/black-tie/jquery-ui-1.8.12.custom.css"
        ]
      }
    },
    environments: {
      test: {
        data: {
          appdb: {
            provider:'test'
          }
        },
        logging: {
          enabled: true,
          defaultLevel: 'debug',// values: all, trace, debug, info, warn, error, fatal, off
          absorbConsoleLogging: true,
          categories: {
            // values: all, trace, debug, info, warn, error, fatal, off
            'feather.http': 'off',
            'feather.fsm': 'info',
            'feather.respack':'off'
          },
          appenders: [
            { 
              // Most basic of appenders.
              type: 'console', 
              options: { layout:'colored' } 
            }
          ],
          templates: [
            {id:'separator', template:'-------------------------------------------------------------------------'}
          ]
        }
      }
    },
    onStartup: function() {
      //-----------------------------------------------------------------------------
      // Include test files
      //-----------------------------------------------------------------------------
      feather.logger.info({message:"Reading test files\n"});
      var i, len, output, ready = true;

      if (files.length > 0){
          for (i=0, len=files.length; i < len; i++){

              if (options.verbose){
                  feather.logger.info("Loading " + files[i] + "\n");
              }

              if (options.webcompat){
                  output = fs.readFileSync(files[i]);
                  if (vm){
                      vm.runInThisContext("(function(YUITest){\n" + output + "\n})", files[i])(YUITest);
                  } else {
                      process.compile("(function(YUITest){\n" + output + "\n})", files[i])(YUITest);
                  }
              } else {
                  try {
                      require(files[i]);
                  } catch (ex) {
                      feather.logger.error({message:ex.reason, exception: ex, immediately: true});
                      feather.logger.error({message:"\nNo tests loaded from " + files[i] + ". If you're not using CommonJS module format, try running with --webcompat option.", immediately: true});
                      feather.shutdown();
                      ready = false;
                  }            
              }
          }
      } else {
        feather.logger.error({message:"No tests to run, exiting.\n", category:"feather.test"});
        feather.shutdown();
        ready = false;
      }

      if (ready) {
        // Kick off the test runner.
        feather.logger.info("Running tests.\n");
        TestRunner.run({
            groups: options.groups ? options.groups.split(",") : null
        });
      }
    }
  };
  require(process.env.FEATHER_HOME + "/lib/core").bootstrap();
  feather.start(options);
} // end else arg length != 0